name: New Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - 'dev'


jobs:

  setenv:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      deployenv: ${{ steps.outputEnv.outputs.deployenv }}
    steps:
      - id: stepDev
        if: github.event.ref == 'refs/heads/dev'
        run: echo "DEPLOYENV=Development" >> $GITHUB_ENV
      - id: outputEnv
        run: |
          echo Deploying to $DEPLOYENV
          echo "deployenv=$DEPLOYENV" >> "$GITHUB_OUTPUT"

  testjob:
    name: Test Job
    runs-on: ubuntu-latest
    needs: setenv
    environment: ${{needs.setenv.outputs.deployenv}}
    steps:
      - name: Output Vars 
        run: |
          echo "${{ vars.EXAMPLEVAR1 }}" 
     
  buildImage:
      name: Build Image and push to ECR
      runs-on: ubuntu-latest
      needs: setenv
      environment: ${{needs.setenv.outputs.deployenv}}
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Build NGINX image
          run: |
            docker build --pull --no-cache --tag hale-platform_nginx --file nginx.dockerfile .
        - name: Push NGINX image to ECR
          uses: jwalton/gh-ecr-push@v1
          with:
            access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
            secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
            region: eu-west-2
            local-image: hale-platform_nginx
            image: ${{ secrets.ECR_NAME }}:hale-platform_nginx-${{ github.sha }}
        - name: Run Composer
          run: |
            composer config http-basic.composer.wp.dsd.io ${{ secrets.COMPOSER_USER }} ${{ secrets.COMPOSER_PASS }}
            composer install --prefer-dist --no-progress
        - name: Run NPM
          run: |
            npm install --prefix ./wordpress/wp-content/themes/hale
            npm run production --if-present --prefix ./wordpress/wp-content/themes/hale
        - name: Build WordPress image
          run: |
            docker build --pull --no-cache --tag hale-platform_wordpress --file wp.dockerfile .
        - name: Push WordPress image to ECR
          uses: jwalton/gh-ecr-push@v1
          with:
            access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
            secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
            region: eu-west-2
            local-image: hale-platform_wordpress:latest
            image: ${{ secrets.ECR_NAME }}:hale-platform_wordpress-${{ github.sha }}

  deployImage:
    name: Deploy Image to Environment
    needs: [setenv, buildImage]
    runs-on: ubuntu-latest
    environment: ${{needs.setenv.outputs.deployenv}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to the cluster
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER_DEV }}
        run: |
          echo "${{ secrets.KUBE_CERT_DEV }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN_DEV }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${{ secrets.KUBE_NAMESPACE_DEV }}
          kubectl config use-context ${KUBE_CLUSTER}
      - name: Apply Helm chart
        run: |
          helm upgrade wordpress helm_deploy/wordpress \
          --install \
          --namespace ${{ secrets.KUBE_NAMESPACE_DEV }} \
          --values helm_deploy/wordpress/values.yaml \
          --set secrets.wpdbuser=${{ secrets.WORDPRESS_DB_USER_DEV }} \
          --set secrets.wpdbhost=${{ secrets.WORDPRESS_DB_HOST_DEV }} \
          --set secrets.wpdbname=${{ secrets.WORDPRESS_DB_NAME_DEV }} \
          --set secrets.wpdbpassword=${{ secrets.WORDPRESS_DB_PASSWORD_DEV }} \
          --set secrets.wpadminemail=${{ secrets.WORDPRESS_ADMIN_EMAIL_DEV }} \
          --set secrets.wpadminuser=${{ secrets.WORDPRESS_ADMIN_USER_DEV }} \
          --set secrets.wpadminpassword=${{ secrets.WORDPRESS_ADMIN_PASSWORD_DEV }} \
          --set secrets.wpauthkey=${{ secrets.WORDPRESS_AUTH_KEY_FILE }} \
          --set secrets.wpauthsalt=${{ secrets.WORDPRESS_AUTH_SALT_FILE }} \
          --set secrets.wploggedinkey=${{ secrets.WORDPRESS_LOGGED_IN_KEY_FILE }} \
          --set secrets.wploggedinsalt=${{ secrets.WORDPRESS_LOGGED_IN_SALT_FILE }} \
          --set secrets.wpnoncekey=${{ secrets.WORDPRESS_NONCE_KEY_FILE }} \
          --set secrets.wpnoncesalt=${{ secrets.WORDPRESS_NONCE_SALT_FILE }} \
          --set secrets.wpsecureauthkey=${{ secrets.WORDPRESS_SECURE_AUTH_KEY_FILE }} \
          --set secrets.wpsecureauthsalt=${{ secrets.WORDPRESS_SECURE_AUTH_SALT_FILE }} \
          --set secrets.s3uploadsbucket=${{ secrets.S3_UPLOADS_BUCKET_DEV }} \
          --set secrets.s3uploadsregion=${{ secrets.S3_UPLOADS_REGION_DEV }} \
          --set secrets.s3uploadskey=${{ secrets.S3_UPLOADS_KEY_DEV }} \
          --set secrets.s3uploadssecret=${{ secrets.S3_UPLOADS_SECRET_DEV }} \
          --set alertSecrets.slackWebhookUrl=${{ secrets.ALERT_SLACK_WEBHOOK_URL }} \
          --set configmap.servername=${{ secrets.KUBE_NAMESPACE_DEV }}.apps.live.cloud-platform.service.justice.gov.uk \
          --set configmap.envtype=${{ vars.ENV_TYPE_DEV }} \
          --set ingress.metadata.annotations.setidentifier=hale-platform-ingress-${{ secrets.KUBE_NAMESPACE_DEV }}-green \
          --set domain=${{ secrets.KUBE_NAMESPACE_DEV }}.apps.live.cloud-platform.service.justice.gov.uk \
          --set nginx.image.repository=754256621582.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.ECR_NAME_DEV }}:hale-platform_nginx-${{ github.sha }} \
          --set wp.image.repository=754256621582.dkr.ecr.eu-west-2.amazonaws.com/${{ secrets.ECR_NAME_DEV }}:hale-platform_wordpress-${{ github.sha }}

  ecrClean:
    name: ECR clean - Dev
    runs-on: ubuntu-latest
    needs: [setenv, buildImage, deployImage]
    steps:
    - name: Run ECR clean-up script
      uses: ministryofjustice/ecr-images-cleaner-action@v1.0.1
      with:
        aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY_DEV }}
        kube-cert: ${{ secrets.KUBE_CERT_DEV }}
        kube-token: ${{ secrets.KUBE_TOKEN_DEV }}
        kube-cluster: ${{ secrets.KUBE_CLUSTER_DEV }}
        kube-namespace: ${{ secrets.KUBE_NAMESPACE_DEV }}
        ecr-repo-name: ${{ secrets.ECR_NAME_DEV }}
        days-to-keep-old-images: 10
        max-old-images-to-keep: 24